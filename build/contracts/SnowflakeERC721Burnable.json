{
  "contractName": "SnowflakeERC721Burnable",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "uint256"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "uint256"
        },
        {
          "name": "to",
          "type": "uint256"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "uint256"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "uint256"
        },
        {
          "name": "to",
          "type": "uint256"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "uint256"
        },
        {
          "name": "operator",
          "type": "uint256"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "uint256"
        },
        {
          "name": "to",
          "type": "uint256"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "snowflakeAddress",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "einFrom",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "einTo",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "einOwner",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "einApproved",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "einOwner",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "einOperator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"uint256\"},{\"name\":\"operator\",\"type\":\"uint256\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snowflakeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"einFrom\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"einTo\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"einOwner\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"einApproved\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"einOwner\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"einOperator\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Snowflake ERC721 Token that can be irreversibly burned (destroyed).\",\"methods\":{\"approve(uint256,uint256)\":{\"details\":\"Approves another EIN to transfer the given token ID The zero EIN indicates there is no approved EIN. There can only be one approved EIN per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"uint256 to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(uint256)\":{\"details\":\"Gets the balance of the specified address\",\"params\":{\"owner\":\"uint256 to query the balance of\"},\"return\":\"uint256 representing the amount owned by the passed address\"},\"burn(uint256)\":{\"details\":\"Burns a specific Snowflake ERC721 token.\",\"params\":{\"tokenId\":\"uint256 id of the Snowflake ERC721 token to be burned.\"}},\"getApproved(uint256)\":{\"details\":\"Gets the approved EIN for a token ID, or zero if no EIN set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"return\":\"EIN currently approved for the given token ID\"},\"isApprovedForAll(uint256,uint256)\":{\"details\":\"Tells whether an operator is approved by a given owner\",\"params\":{\"operator\":\"operator EIN which you want to query the approval of\",\"owner\":\"owner EIN which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the given owner\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"return\":\"uint256 currently marked as the owner of the given token ID\"},\"safeTransferFrom(uint256,uint256,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another EIN If the target EIN is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"uint256 current owner of the token\",\"to\":\"uint256 to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(uint256,uint256,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another EIN If the target EIN is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"uint256 to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(uint256,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator EIN to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"implement supportsInterface(bytes4) using a lookup table\"},\"transferFrom(uint256,uint256,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}},\"title\":\"Snowflake ERC721 Burnable Token\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/ein/token/ERC721/SnowflakeERC721Burnable.sol\":\"SnowflakeERC721Burnable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/ein/token/ERC721/SnowflakeERC721.sol\":{\"keccak256\":\"0x8a370499f7285103514127d61b05b9f1c5e1f52d1974f3b039e45cd28c3ea878\",\"urls\":[\"bzzr://d22fe33589ee906af949bc1cc429a395f14796f3142d50e59d3d6de16f8a509e\"]},\"/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/ein/token/ERC721/SnowflakeERC721Burnable.sol\":{\"keccak256\":\"0x2db6951914d133a6c6fa46a6b64e1c0010da9715101cf7d5fff6a58dc8f0116c\",\"urls\":[\"bzzr://6943eeeb1335cff854aade9217eca42dc427cbe5833b81b92f932cfd977c6e79\"]},\"/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/ein/token/ERC721/SnowflakeERC721Interface.sol\":{\"keccak256\":\"0xa5e0f633e49cedd94989337a9cb2464dc948ceba335988397e526224b602c116\",\"urls\":[\"bzzr://f11c8ed796d4d4b73a5b88daf1fe83ea24eaa50139179359ada7b243ca29f521\"]},\"/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/ein/token/ERC721/SnowflakeERC721ReceiverInterface.sol\":{\"keccak256\":\"0x1d94fd6a75bca20c27bfafc97de2e9df0f12eeae152820bbcaa423535223c019\",\"urls\":[\"bzzr://d053e44920ee5c53ded1ae8a112f34f28732bbc3ac04beb10b2e63369137c7dc\"]},\"/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/interfaces/IdentityRegistryInterface.sol\":{\"keccak256\":\"0xb559191dbd30da97a8b5759a895d7f4eff420eedc55b0786ae7206fbe384dc15\",\"urls\":[\"bzzr://a6122de11af1f831b1a93dba66aabe9e299f0040cf3404510790453addc6e0d9\"]},\"/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/interfaces/SnowflakeInterface.sol\":{\"keccak256\":\"0xb34e22de661c32131d4d5bbd8f8dbf1794e5d944736ccb31870b6f75bdd322e5\",\"urls\":[\"bzzr://aaa6399afaf287d517ece7ac874cf6da3c2d81f9d88cb8cdc4631adc3f4ac52a\"]},\"/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/snowflake_custom/SnowflakeReader.sol\":{\"keccak256\":\"0x2abd0f0b6837dec5554cf29f986d5e365631fc514d2f636fab1054958fd1a1c0\",\"urls\":[\"bzzr://149da665bf1ca0442cf1956087a24d1a11de1a2f5cd77eebefdcf2e1f2c56bb4\"]},\"/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/zeppelin/drafts/Counters.sol\":{\"keccak256\":\"0x982e18d2e3df98e3339f70f955a4d1fb78411a29963d0ea34621759eef67e86d\",\"urls\":[\"bzzr://a5438906da44343a09c6b47666d3649f269d9d156f2109e147e21595b2284363\"]},\"/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/zeppelin/introspection/ERC165.sol\":{\"keccak256\":\"0xd86c61f2e7e78c88716b5591bbf2d6cce8fe1a68320484994810d54f82605a7a\",\"urls\":[\"bzzr://4823f8b1263e0bacc50b5a823ebb27abeda34bffd67fa72225c44ebb2b4a30c7\"]},\"/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/zeppelin/introspection/IERC165.sol\":{\"keccak256\":\"0xc48ee580d20820cc0ef122b2acc9bf8836731dd8b9671cc03d21a12e3ab14976\",\"urls\":[\"bzzr://744cf3b8280d4a050ad0771e2ed0d7d41bbddfa40a541933d46bb31007a2e4a9\"]},\"/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/zeppelin/math/SafeMath.sol\":{\"keccak256\":\"0x2cee2f0a5f7c68ece40aa1641b34177859058b4b3d74f243112c96f0bff7d54b\",\"urls\":[\"bzzr://f84a966fb57ec20ab2ed137b385c332cb5f67a5ad2ee5c46eb64b3ca6a6ab1cd\"]}},\"version\":1}",
  "bytecode": "0x60806040526100367f01ffc9a70000000000000000000000000000000000000000000000000000000064010000000061003b810204565b6100a7565b7fffffffff00000000000000000000000000000000000000000000000000000000808216141561006a57600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b610af3806100b66000396000f3fe608060405234801561001057600080fd5b50600436106100b85760003560e060020a900480636352211e116100755780636352211e146101cc57806368d1e641146101e95780638d9188d5146102a25780639cc7f708146102c5578063f4670462146102e2578063f9f451b81461030b576100b8565b806301ffc9a7146100bd578063081812fc1461010d57806316b49a431461013c578063310ed7f01461016357806342966c681461018c5780635d35a3d9146101a9575b600080fd5b6100f9600480360360208110156100d357600080fd5b50357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191661032f565b604080519115158252519081900360200190f35b61012a6004803603602081101561012357600080fd5b5035610363565b60408051918252519081900360200190f35b6101616004803603604081101561015257600080fd5b5080359060200135151561038a565b005b6101616004803603606081101561017957600080fd5b5080359060208101359060400135610406565b610161600480360360208110156101a257600080fd5b5035610431565b610161600480360360408110156101bf57600080fd5b5080359060200135610452565b61012a600480360360208110156101e257600080fd5b50356104d7565b610161600480360360808110156101ff57600080fd5b8135916020810135916040820135919081019060808101606082013564010000000081111561022d57600080fd5b82018360208201111561023f57600080fd5b8035906020019184600183028401116401000000008311171561026157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506104f6945050505050565b6100f9600480360360408110156102b857600080fd5b508035906020013561051c565b61012a600480360360208110156102db57600080fd5b503561053c565b610161600480360360608110156102f857600080fd5b508035906020810135906040013561055f565b61031361057a565b60408051600160a060020a039092168252519081900360200190f35b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b600061036e82610589565b61037757600080fd5b5060009081526003602052604090205490565b60006103953361059d565b9050808314156103a457600080fd5b6000818152600560209081526040808320868452825291829020805460ff191685151590811790915582519081529151859284927fe08356808518f185b1eebe6f778106965c2df3a69af4d7139fa9451067146eb792918290030190a3505050565b6104186104123361059d565b826107a3565b61042157600080fd5b61042c8383836107de565b505050565b61043d6104123361059d565b61044657600080fd5b61044f81610874565b50565b600061045d826104d7565b9050600061046a3361059d565b90508184141561047957600080fd5b8181148061048c575061048c828261051c565b61049557600080fd5b600083815260036020526040808220869055518491869185917f08aaf4f7dd1adfa5bfe7067dea5b4ebd7e119d43257438a9189f37d7044eb09a91a450505050565b600081815260026020526040812054806104f057600080fd5b92915050565b610501848484610406565b61050d84848484610886565b61051657600080fd5b50505050565b600091825260056020908152604080842092845291905290205460ff1690565b60008161054857600080fd5b60008281526004602052604090206104f0906109cc565b61042c838383604051806020016040528060008152506104f6565b600154600160a060020a031681565b600090815260026020526040902054151590565b600154604080517fa759ee6f0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316918391839163a759ee6f91600480830192602092919082900301818787803b15801561060057600080fd5b505af1158015610614573d6000803e3d6000fd5b505050506040513d602081101561062a57600080fd5b5051604080517f237f1a21000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152915192935083929183169163237f1a2191602480820192602092909190829003018186803b15801561069457600080fd5b505afa1580156106a8573d6000803e3d6000fd5b505050506040513d60208110156106be57600080fd5b5051610715576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610aa06028913960400191505060405180910390fd5b80600160a060020a03166305c62c2f866040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561076e57600080fd5b505afa158015610782573d6000803e3d6000fd5b505050506040513d602081101561079857600080fd5b505195945050505050565b6000806107af836104d7565b9050808414806107c65750836107c484610363565b145b806107d657506107d6818561051c565b949350505050565b826107e8826104d7565b146107f257600080fd5b816107fc57600080fd5b610805816109d0565b600083815260046020526040902061081c906109f5565b600082815260046020526040902061083390610a0c565b600081815260026020526040808220849055518291849186917faf6151f5085accf2d57e1e7bf7601d3b3982e0de7e9a90f032f8554de9c104f691a4505050565b61044f610880826104d7565b82610a15565b60008084600160a060020a031663494114c26108a13361059d565b8887876040518563ffffffff1660e060020a0281526004018085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109055781810151838201526020016108ed565b50505050905090810190601f1680156109325780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561095457600080fd5b505af1158015610968573d6000803e3d6000fd5b505050506040513d602081101561097e57600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f494114c20000000000000000000000000000000000000000000000000000000014915050949350505050565b5490565b6000818152600360205260409020541561044f57600090815260036020526040812055565b8054610a0890600163ffffffff610a8a16565b9055565b80546001019055565b81610a1f826104d7565b14610a2957600080fd5b610a32816109d0565b6000828152600460205260409020610a49906109f5565b6000818152600260205260408082208290555182919084907faf6151f5085accf2d57e1e7bf7601d3b3982e0de7e9a90f032f8554de9c104f6908390a45050565b600082821115610a9957600080fd5b5090039056fe41646472657373206e6f6e2d6578697374656e7420696e204964656e746974795265676973747279a165627a7a723058202da14ec37338531cda4ede9ee9007659e0076fbb8b740d023724f9414c44065a0029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b85760003560e060020a900480636352211e116100755780636352211e146101cc57806368d1e641146101e95780638d9188d5146102a25780639cc7f708146102c5578063f4670462146102e2578063f9f451b81461030b576100b8565b806301ffc9a7146100bd578063081812fc1461010d57806316b49a431461013c578063310ed7f01461016357806342966c681461018c5780635d35a3d9146101a9575b600080fd5b6100f9600480360360208110156100d357600080fd5b50357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191661032f565b604080519115158252519081900360200190f35b61012a6004803603602081101561012357600080fd5b5035610363565b60408051918252519081900360200190f35b6101616004803603604081101561015257600080fd5b5080359060200135151561038a565b005b6101616004803603606081101561017957600080fd5b5080359060208101359060400135610406565b610161600480360360208110156101a257600080fd5b5035610431565b610161600480360360408110156101bf57600080fd5b5080359060200135610452565b61012a600480360360208110156101e257600080fd5b50356104d7565b610161600480360360808110156101ff57600080fd5b8135916020810135916040820135919081019060808101606082013564010000000081111561022d57600080fd5b82018360208201111561023f57600080fd5b8035906020019184600183028401116401000000008311171561026157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506104f6945050505050565b6100f9600480360360408110156102b857600080fd5b508035906020013561051c565b61012a600480360360208110156102db57600080fd5b503561053c565b610161600480360360608110156102f857600080fd5b508035906020810135906040013561055f565b61031361057a565b60408051600160a060020a039092168252519081900360200190f35b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b600061036e82610589565b61037757600080fd5b5060009081526003602052604090205490565b60006103953361059d565b9050808314156103a457600080fd5b6000818152600560209081526040808320868452825291829020805460ff191685151590811790915582519081529151859284927fe08356808518f185b1eebe6f778106965c2df3a69af4d7139fa9451067146eb792918290030190a3505050565b6104186104123361059d565b826107a3565b61042157600080fd5b61042c8383836107de565b505050565b61043d6104123361059d565b61044657600080fd5b61044f81610874565b50565b600061045d826104d7565b9050600061046a3361059d565b90508184141561047957600080fd5b8181148061048c575061048c828261051c565b61049557600080fd5b600083815260036020526040808220869055518491869185917f08aaf4f7dd1adfa5bfe7067dea5b4ebd7e119d43257438a9189f37d7044eb09a91a450505050565b600081815260026020526040812054806104f057600080fd5b92915050565b610501848484610406565b61050d84848484610886565b61051657600080fd5b50505050565b600091825260056020908152604080842092845291905290205460ff1690565b60008161054857600080fd5b60008281526004602052604090206104f0906109cc565b61042c838383604051806020016040528060008152506104f6565b600154600160a060020a031681565b600090815260026020526040902054151590565b600154604080517fa759ee6f0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316918391839163a759ee6f91600480830192602092919082900301818787803b15801561060057600080fd5b505af1158015610614573d6000803e3d6000fd5b505050506040513d602081101561062a57600080fd5b5051604080517f237f1a21000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152915192935083929183169163237f1a2191602480820192602092909190829003018186803b15801561069457600080fd5b505afa1580156106a8573d6000803e3d6000fd5b505050506040513d60208110156106be57600080fd5b5051610715576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610aa06028913960400191505060405180910390fd5b80600160a060020a03166305c62c2f866040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561076e57600080fd5b505afa158015610782573d6000803e3d6000fd5b505050506040513d602081101561079857600080fd5b505195945050505050565b6000806107af836104d7565b9050808414806107c65750836107c484610363565b145b806107d657506107d6818561051c565b949350505050565b826107e8826104d7565b146107f257600080fd5b816107fc57600080fd5b610805816109d0565b600083815260046020526040902061081c906109f5565b600082815260046020526040902061083390610a0c565b600081815260026020526040808220849055518291849186917faf6151f5085accf2d57e1e7bf7601d3b3982e0de7e9a90f032f8554de9c104f691a4505050565b61044f610880826104d7565b82610a15565b60008084600160a060020a031663494114c26108a13361059d565b8887876040518563ffffffff1660e060020a0281526004018085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109055781810151838201526020016108ed565b50505050905090810190601f1680156109325780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561095457600080fd5b505af1158015610968573d6000803e3d6000fd5b505050506040513d602081101561097e57600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f494114c20000000000000000000000000000000000000000000000000000000014915050949350505050565b5490565b6000818152600360205260409020541561044f57600090815260036020526040812055565b8054610a0890600163ffffffff610a8a16565b9055565b80546001019055565b81610a1f826104d7565b14610a2957600080fd5b610a32816109d0565b6000828152600460205260409020610a49906109f5565b6000818152600260205260408082208290555182919084907faf6151f5085accf2d57e1e7bf7601d3b3982e0de7e9a90f032f8554de9c104f6908390a45050565b600082821115610a9957600080fd5b5090039056fe41646472657373206e6f6e2d6578697374656e7420696e204964656e746974795265676973747279a165627a7a723058202da14ec37338531cda4ede9ee9007659e0076fbb8b740d023724f9414c44065a0029",
  "sourceMap": "184:615:13:-;;;639:40:62;658:20;639:18;;;;:40;:::i;:::-;184:615:13;;989:158:62;1064:25;;;;;;1056:34;;;;;;1100:33;;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1100:40:62;1136:4;1100:40;;;989:158::o;184:615:13:-;;;;;;;",
  "deployedSourceMap": "184:615:13:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;184:615:13;;;;;;;;-1:-1:-1;;;184:615:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;777:133:62;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;777:133:62;-1:-1:-1;;777:133:62;;:::i;:::-;;;;;;;;;;;;;;;;;;4410:151:12;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4410:151:12;;:::i;:::-;;;;;;;;;;;;;;;;4849:246;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4849:246:12;;;;;;;;;:::i;:::-;;5987:188;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5987:188:12;;;;;;;;;;;;:::i;662:135:13:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;662:135:13;;:::i;3808:329:12:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3808:329:12;;;;;;;:::i;3235:168::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3235:168:12;;:::i;7637:211::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;7637:211:12;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;7637:211:12;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7637:211:12;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7637:211:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;7637:211:12;;-1:-1:-1;7637:211:12;;-1:-1:-1;;;;;7637:211:12:i;5408:145::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5408:145:12;;;;;;;:::i;2866:151::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2866:151:12;;:::i;6808:132::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6808:132:12;;;;;;;;;;;;:::i;371:31:53:-;;;:::i;:::-;;;;-1:-1:-1;;;;;371:31:53;;;;;;;;;;;;;;777:133:62;-1:-1:-1;;870:33:62;847:4;870:33;;;;;;;;;;;;;;777:133::o;4410:151:12:-;4469:7;4496:16;4504:7;4496;:16::i;:::-;4488:25;;;;;;-1:-1:-1;4530:24:12;;;;:15;:24;;;;;;;4410:151::o;4849:246::-;4920:14;4937:18;4944:10;4937:6;:18::i;:::-;4920:35;;4979:6;4973:2;:12;;4965:21;;;;;;4996:26;;;;:18;:26;;;;;;;;:30;;;;;;;;;:41;;-1:-1:-1;;4996:41:12;;;;;;;;;;5052:36;;;;;;;4996:30;;:26;;5052:36;;;;;;;;;4849:246;;;:::o;5987:188::-;6077:47;6096:18;6103:10;6096:6;:18::i;:::-;6116:7;6077:18;:47::i;:::-;6069:56;;;;;;6136:32;6150:4;6156:2;6160:7;6136:13;:32::i;:::-;5987:188;;;:::o;662:135:13:-;718:47;737:18;744:10;737:6;:18::i;718:47::-;710:56;;;;;;776:14;782:7;776:5;:14::i;:::-;662:135;:::o;3808:329:12:-;3871:13;3887:16;3895:7;3887;:16::i;:::-;3871:32;;3913:14;3930:18;3937:10;3930:6;:18::i;:::-;3913:35;;3972:5;3966:2;:11;;3958:20;;;;;;4006:5;3996:6;:15;:50;;;;4015:31;4032:5;4039:6;4015:16;:31::i;:::-;3988:59;;;;;;4058:24;;;;:15;:24;;;;;;:29;;;4102:28;4074:7;;4085:2;;4111:5;;4102:28;;;3808:329;;;;:::o;3235:168::-;3290:7;3325:20;;;:11;:20;;;;;;3363:10;3355:19;;;;;;3391:5;3235:168;-1:-1:-1;;3235:168:12:o;7637:211::-;7743:31;7756:4;7762:2;7766:7;7743:12;:31::i;:::-;7792:48;7815:4;7821:2;7825:7;7834:5;7792:22;:48::i;:::-;7784:57;;;;;;7637:211;;;;:::o;5408:145::-;5488:4;5511:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;5408:145::o;2866:151::-;2921:7;2948:10;2940:19;;;;;;2976:24;;;;:17;:24;;;;;:34;;:32;:34::i;6808:132::-;6894:39;6911:4;6917:2;6921:7;6894:39;;;;;;;;;;;;:16;:39::i;371:31:53:-;;;-1:-1:-1;;;;;371:31:53;;:::o;8042:143:12:-;8099:4;8131:20;;;:11;:20;;;;;;8168:10;;;8042:143::o;736:580:53:-;940:16;;982:28;;;;;;;;790:11;;-1:-1:-1;;;;;940:16:53;;790:11;;940:16;;982:26;;:28;;;;;;;;;;;;;;790:11;940:16;982:28;;;5:2:-1;;;;30:1;27;20:12;5:2;982:28:53;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;982:28:53;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;982:28:53;1171:40;;;;;;-1:-1:-1;;;;;1171:40:53;;;;;;;;;982:28;;-1:-1:-1;982:28:53;;1171;;;;;;:40;;;;;982:28;;1171:40;;;;;;;;:28;:40;;;5:2:-1;;;;30:1;27;20:12;5:2;1171:40:53;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1171:40:53;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1171:40:53;1163:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1274:16;-1:-1:-1;;;;;1274:23:53;;1298:10;1274:35;;;;;-1:-1:-1;;;1274:35:53;;;;;;;-1:-1:-1;;;;;1274:35:53;-1:-1:-1;;;;;1274:35:53;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1274:35:53;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1274:35:53;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1274:35:53;;736:580;-1:-1:-1;;;;;736:580:53:o;8545:246:12:-;8630:4;8646:13;8662:16;8670:7;8662;:16::i;:::-;8646:32;;8707:5;8696:7;:16;:51;;;;8740:7;8716:20;8728:7;8716:11;:20::i;:::-;:31;8696:51;:87;;;;8751:32;8768:5;8775:7;8751:16;:32::i;:::-;8688:96;8545:246;-1:-1:-1;;;;8545:246:12:o;10457:353::-;10570:4;10550:16;10558:7;10550;:16::i;:::-;:24;10542:33;;;;;;10593:7;10585:16;;;;;;10612:23;10627:7;10612:14;:23::i;:::-;10646;;;;:17;:23;;;;;:35;;:33;:35::i;:::-;10691:21;;;;:17;:21;;;;;:33;;:31;:33::i;:::-;10735:20;;;;:11;:20;;;;;;:25;;;10776:27;10747:7;;10758:2;;10785:4;;10776:27;;;10457:353;;;:::o;9992:90::-;10043:32;10049:16;10057:7;10049;:16::i;:::-;10067:7;10043:5;:32::i;11334:376::-;11455:4;11547:13;11596:2;-1:-1:-1;;;;;11563:53:12;;11617:18;11624:10;11617:6;:18::i;:::-;11637:4;11643:7;11652:5;11563:95;;;;;-1:-1:-1;;;11563:95:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;11563:95:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11563:95:12;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11563:95:12;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11563:95:12;-1:-1:-1;;11676:26:12;11686:16;11676:26;;-1:-1:-1;;11334:376:12;;;;;;:::o;1062:112:61:-;1153:14;;1062:112::o;11871:153:12:-;11934:24;;;;:15;:24;;;;;;:29;11930:88;;12006:1;11979:24;;;:15;:24;;;;;:28;11871:153::o;1275:108:61:-;1355:14;;:21;;1374:1;1355:21;:18;:21;:::i;:::-;1338:38;;1275:108::o;1180:89::-;1243:19;;1261:1;1243:19;;;1180:89::o;9548:265:12:-;9642:5;9622:16;9630:7;9622;:16::i;:::-;:25;9614:34;;;;;;9659:23;9674:7;9659:14;:23::i;:::-;9693:24;;;;:17;:24;;;;;:36;;:34;:36::i;:::-;9762:1;9739:20;;;:11;:20;;;;;;:24;;;9779:27;9751:7;;9762:1;9788:5;;9779:27;;9762:1;;9779:27;9548:265;;:::o;1156:145:66:-;1214:7;1246:1;1241;:6;;1233:15;;;;;;-1:-1:-1;1270:5:66;;;1156:145::o",
  "source": "pragma solidity ^0.5.2;\n\nimport \"./SnowflakeERC721.sol\";\n\n/**\n * @title Snowflake ERC721 Burnable Token\n * @dev Snowflake ERC721 Token that can be irreversibly burned (destroyed).\n */\ncontract SnowflakeERC721Burnable is SnowflakeERC721 {\n/*\n    constructor(address _snowflakeAddress) public {\n        _constructSnowflakeERC721Burnable(_snowflakeAddress);\n    }\n  */\n    function _constructSnowflakeERC721Burnable(address _snowflakeAddress) internal {\n        _constructSnowflakeERC721(_snowflakeAddress);\n    }\n\n    /**\n     * @dev Burns a specific Snowflake ERC721 token.\n     * @param tokenId uint256 id of the Snowflake ERC721 token to be burned.\n     */\n    function burn(uint256 tokenId) public {\n        require(_isApprovedOrOwner(getEIN(msg.sender), tokenId));\n        _burn(tokenId);\n    }\n}\n",
  "sourcePath": "/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/ein/token/ERC721/SnowflakeERC721Burnable.sol",
  "ast": {
    "absolutePath": "/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/ein/token/ERC721/SnowflakeERC721Burnable.sol",
    "exportedSymbols": {
      "SnowflakeERC721Burnable": [
        6336
      ]
    },
    "id": 6337,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6302,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:13"
      },
      {
        "absolutePath": "/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/ein/token/ERC721/SnowflakeERC721.sol",
        "file": "./SnowflakeERC721.sol",
        "id": 6303,
        "nodeType": "ImportDirective",
        "scope": 6337,
        "sourceUnit": 6301,
        "src": "25:31:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6304,
              "name": "SnowflakeERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6300,
              "src": "220:15:13",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SnowflakeERC721_$6300",
                "typeString": "contract SnowflakeERC721"
              }
            },
            "id": 6305,
            "nodeType": "InheritanceSpecifier",
            "src": "220:15:13"
          }
        ],
        "contractDependencies": [
          6300,
          6439,
          12011,
          12829,
          12976
        ],
        "contractKind": "contract",
        "documentation": "@title Snowflake ERC721 Burnable Token\n@dev Snowflake ERC721 Token that can be irreversibly burned (destroyed).",
        "fullyImplemented": true,
        "id": 6336,
        "linearizedBaseContracts": [
          6336,
          6300,
          12011,
          6439,
          12829,
          12976
        ],
        "name": "SnowflakeERC721Burnable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 6314,
              "nodeType": "Block",
              "src": "449:61:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6311,
                        "name": "_snowflakeAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6307,
                        "src": "485:17:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 6310,
                      "name": "_constructSnowflakeERC721",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5823,
                      "src": "459:25:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 6312,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "459:44:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6313,
                  "nodeType": "ExpressionStatement",
                  "src": "459:44:13"
                }
              ]
            },
            "documentation": null,
            "id": 6315,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_constructSnowflakeERC721Burnable",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6308,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6307,
                  "name": "_snowflakeAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 6315,
                  "src": "413:25:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6306,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "413:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "412:27:13"
            },
            "returnParameters": {
              "id": 6309,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "449:0:13"
            },
            "scope": 6336,
            "src": "370:140:13",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 6334,
              "nodeType": "Block",
              "src": "700:97:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 6323,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 14657,
                                  "src": "744:3:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 6324,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "744:10:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              ],
                              "id": 6322,
                              "name": "getEIN",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 12010,
                              "src": "737:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address) returns (uint256)"
                              }
                            },
                            "id": 6325,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "737:18:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 6326,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6317,
                            "src": "757:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 6321,
                          "name": "_isApprovedOrOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6104,
                          "src": "718:18:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256,uint256) view returns (bool)"
                          }
                        },
                        "id": 6327,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "718:47:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 6320,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        14660,
                        14661
                      ],
                      "referencedDeclaration": 14660,
                      "src": "710:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 6328,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "710:56:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6329,
                  "nodeType": "ExpressionStatement",
                  "src": "710:56:13"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6331,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6317,
                        "src": "782:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 6330,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        6181,
                        6194
                      ],
                      "referencedDeclaration": 6194,
                      "src": "776:5:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 6332,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "776:14:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6333,
                  "nodeType": "ExpressionStatement",
                  "src": "776:14:13"
                }
              ]
            },
            "documentation": "@dev Burns a specific Snowflake ERC721 token.\n@param tokenId uint256 id of the Snowflake ERC721 token to be burned.",
            "id": 6335,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6318,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6317,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 6335,
                  "src": "676:15:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6316,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "676:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "675:17:13"
            },
            "returnParameters": {
              "id": 6319,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "700:0:13"
            },
            "scope": 6336,
            "src": "662:135:13",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 6337,
        "src": "184:615:13"
      }
    ],
    "src": "0:800:13"
  },
  "legacyAST": {
    "absolutePath": "/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/ein/token/ERC721/SnowflakeERC721Burnable.sol",
    "exportedSymbols": {
      "SnowflakeERC721Burnable": [
        6336
      ]
    },
    "id": 6337,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6302,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:13"
      },
      {
        "absolutePath": "/home/luiserebii/hydrosnowflake_marketplace_coupons/contracts/ein/token/ERC721/SnowflakeERC721.sol",
        "file": "./SnowflakeERC721.sol",
        "id": 6303,
        "nodeType": "ImportDirective",
        "scope": 6337,
        "sourceUnit": 6301,
        "src": "25:31:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6304,
              "name": "SnowflakeERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6300,
              "src": "220:15:13",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SnowflakeERC721_$6300",
                "typeString": "contract SnowflakeERC721"
              }
            },
            "id": 6305,
            "nodeType": "InheritanceSpecifier",
            "src": "220:15:13"
          }
        ],
        "contractDependencies": [
          6300,
          6439,
          12011,
          12829,
          12976
        ],
        "contractKind": "contract",
        "documentation": "@title Snowflake ERC721 Burnable Token\n@dev Snowflake ERC721 Token that can be irreversibly burned (destroyed).",
        "fullyImplemented": true,
        "id": 6336,
        "linearizedBaseContracts": [
          6336,
          6300,
          12011,
          6439,
          12829,
          12976
        ],
        "name": "SnowflakeERC721Burnable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 6314,
              "nodeType": "Block",
              "src": "449:61:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6311,
                        "name": "_snowflakeAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6307,
                        "src": "485:17:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 6310,
                      "name": "_constructSnowflakeERC721",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5823,
                      "src": "459:25:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 6312,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "459:44:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6313,
                  "nodeType": "ExpressionStatement",
                  "src": "459:44:13"
                }
              ]
            },
            "documentation": null,
            "id": 6315,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_constructSnowflakeERC721Burnable",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6308,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6307,
                  "name": "_snowflakeAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 6315,
                  "src": "413:25:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6306,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "413:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "412:27:13"
            },
            "returnParameters": {
              "id": 6309,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "449:0:13"
            },
            "scope": 6336,
            "src": "370:140:13",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 6334,
              "nodeType": "Block",
              "src": "700:97:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 6323,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 14657,
                                  "src": "744:3:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 6324,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "744:10:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              ],
                              "id": 6322,
                              "name": "getEIN",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 12010,
                              "src": "737:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address) returns (uint256)"
                              }
                            },
                            "id": 6325,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "737:18:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 6326,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6317,
                            "src": "757:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 6321,
                          "name": "_isApprovedOrOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6104,
                          "src": "718:18:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256,uint256) view returns (bool)"
                          }
                        },
                        "id": 6327,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "718:47:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 6320,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        14660,
                        14661
                      ],
                      "referencedDeclaration": 14660,
                      "src": "710:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 6328,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "710:56:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6329,
                  "nodeType": "ExpressionStatement",
                  "src": "710:56:13"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6331,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6317,
                        "src": "782:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 6330,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        6181,
                        6194
                      ],
                      "referencedDeclaration": 6194,
                      "src": "776:5:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 6332,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "776:14:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6333,
                  "nodeType": "ExpressionStatement",
                  "src": "776:14:13"
                }
              ]
            },
            "documentation": "@dev Burns a specific Snowflake ERC721 token.\n@param tokenId uint256 id of the Snowflake ERC721 token to be burned.",
            "id": 6335,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6318,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6317,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 6335,
                  "src": "676:15:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6316,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "676:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "675:17:13"
            },
            "returnParameters": {
              "id": 6319,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "700:0:13"
            },
            "scope": 6336,
            "src": "662:135:13",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 6337,
        "src": "184:615:13"
      }
    ],
    "src": "0:800:13"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.6+commit.b259423e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.6",
  "updatedAt": "2019-04-11T00:38:35.854Z",
  "devdoc": {
    "details": "Snowflake ERC721 Token that can be irreversibly burned (destroyed).",
    "methods": {
      "approve(uint256,uint256)": {
        "details": "Approves another EIN to transfer the given token ID The zero EIN indicates there is no approved EIN. There can only be one approved EIN per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "uint256 to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(uint256)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "uint256 to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "burn(uint256)": {
        "details": "Burns a specific Snowflake ERC721 token.",
        "params": {
          "tokenId": "uint256 id of the Snowflake ERC721 token to be burned."
        }
      },
      "getApproved(uint256)": {
        "details": "Gets the approved EIN for a token ID, or zero if no EIN set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "EIN currently approved for the given token ID"
      },
      "isApprovedForAll(uint256,uint256)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator EIN which you want to query the approval of",
          "owner": "owner EIN which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "uint256 currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(uint256,uint256,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another EIN If the target EIN is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "uint256 current owner of the token",
          "to": "uint256 to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(uint256,uint256,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another EIN If the target EIN is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "uint256 to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(uint256,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator EIN to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "transferFrom(uint256,uint256,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    },
    "title": "Snowflake ERC721 Burnable Token"
  },
  "userdoc": {
    "methods": {}
  }
}