{
  "contractName": "ERC721Mintable",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC721 minting logic\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address\",\"params\":{\"owner\":\"address to query the balance of\"},\"return\":\"uint256 representing the amount owned by the passed address\"},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"return\":\"address currently approved for the given token ID\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the given owner\"},\"mint(address,uint256)\":{\"details\":\"Function to mint tokens\",\"params\":{\"to\":\"The address that will receive the minted tokens.\",\"tokenId\":\"The token id to mint.\"},\"return\":\"A boolean that indicates if the operation was successful.\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"return\":\"address currently marked as the owner of the given token ID\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"implement supportsInterface(bytes4) using a lookup table\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}},\"title\":\"ERC721Mintable\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/token/ERC721/ERC721Mintable.sol\":\"ERC721Mintable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/access/Roles.sol\":{\"keccak256\":\"0x75481aaa988c5e9fbc91b4f695678806579c04e0ad56907978c1ca5c7e92a682\",\"urls\":[\"bzzr://da472135eb9268d863825ea26e227a9f8980c54bd32e0764d61711acca59fc89\"]},\"/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/access/roles/MinterRole.sol\":{\"keccak256\":\"0x317b01d5df6753f57244b354d0a23d5055b293f3fa22693c2ff7906cc988ce97\",\"urls\":[\"bzzr://d3f08352c241a34db9b244c5fb569c7ffb3dcd1a0aa288c855a4a70eddb9e2a3\"]},\"/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/drafts/Counters.sol\":{\"keccak256\":\"0x982e18d2e3df98e3339f70f955a4d1fb78411a29963d0ea34621759eef67e86d\",\"urls\":[\"bzzr://a5438906da44343a09c6b47666d3649f269d9d156f2109e147e21595b2284363\"]},\"/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/introspection/ERC165.sol\":{\"keccak256\":\"0xd86c61f2e7e78c88716b5591bbf2d6cce8fe1a68320484994810d54f82605a7a\",\"urls\":[\"bzzr://4823f8b1263e0bacc50b5a823ebb27abeda34bffd67fa72225c44ebb2b4a30c7\"]},\"/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/introspection/IERC165.sol\":{\"keccak256\":\"0xc48ee580d20820cc0ef122b2acc9bf8836731dd8b9671cc03d21a12e3ab14976\",\"urls\":[\"bzzr://744cf3b8280d4a050ad0771e2ed0d7d41bbddfa40a541933d46bb31007a2e4a9\"]},\"/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/math/SafeMath.sol\":{\"keccak256\":\"0x2cee2f0a5f7c68ece40aa1641b34177859058b4b3d74f243112c96f0bff7d54b\",\"urls\":[\"bzzr://f84a966fb57ec20ab2ed137b385c332cb5f67a5ad2ee5c46eb64b3ca6a6ab1cd\"]},\"/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x07029cbf047f6559e30862f33be2ee323c763e2fc251bca5de44177d29cf15e2\",\"urls\":[\"bzzr://bacac55aed34ace5358b0c89d0fdcd424e3b2d67e2deb51e238b54bd4903317f\"]},\"/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/token/ERC721/ERC721Mintable.sol\":{\"keccak256\":\"0x188b149d129830814fac640678295376012741a9303e9c59a816d873f9f5f151\",\"urls\":[\"bzzr://dea98da5963fcb2636140cb3bf2e5d6045c491c81e32600b256188a0cbd086ee\"]},\"/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x44fd7c58fc1323f8481f160f2fd4c34b1653d0cc5def45c2381898d32bcc023e\",\"urls\":[\"bzzr://b7c59c72ede9ca492a5606cbbfaa4ba84e9869d9bdcdac2183655baae8b64026\"]},\"/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xeb8a266ef2da0aa60eea704031902ffd28b2d13dd0e8f5b69bcfb8415f2dad85\",\"urls\":[\"bzzr://393e9843d41c0652f115378cc58083c4acc4d83f7999fe22932d5e237c215d3f\"]},\"/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/utils/Address.sol\":{\"keccak256\":\"0xea16b9933153c647242ba50b3e494fb133063d49f1fa81823f35a8c28754142e\",\"urls\":[\"bzzr://aa2b2eb534149525e194341c01cadf666668a1b7d679a268d10e23570a7e26b1\"]}},\"version\":1}",
  "bytecode": "0x60806040526100367f01ffc9a70000000000000000000000000000000000000000000000000000000064010000000061007f810204565b6100687f80ac58cd0000000000000000000000000000000000000000000000000000000064010000000061007f810204565b61007a336401000000006100eb810204565b6101c4565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156100ae57600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b610103600582640100000000610bdd61013a82021704565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b600160a060020a03811661014d57600080fd5b610160828264010000000061018f810204565b1561016a57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a0382166101a457600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b610cb8806101d36000396000f3fe608060405234801561001057600080fd5b5060043610610107576000357c01000000000000000000000000000000000000000000000000000000009004806370a08231116100a9578063a22cb46511610083578063a22cb465146102de578063aa271e1a1461030c578063b88d4fde14610332578063e985e9c5146103f857610107565b806370a0823114610278578063983b2d56146102b057806398650275146102d657610107565b806323b872dd116100e557806323b872dd146101c357806340c10f19146101f957806342842e0e146102255780636352211e1461025b57610107565b806301ffc9a71461010c578063081812fc1461015c578063095ea7b314610195575b600080fd5b6101486004803603602081101561012257600080fd5b50357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916610426565b604080519115158252519081900360200190f35b6101796004803603602081101561017257600080fd5b503561045a565b60408051600160a060020a039092168252519081900360200190f35b6101c1600480360360408110156101ab57600080fd5b50600160a060020a03813516906020013561048a565b005b6101c1600480360360608110156101d957600080fd5b50600160a060020a03813581169160208101359091169060400135610544565b6101486004803603604081101561020f57600080fd5b50600160a060020a038135169060200135610567565b6101c16004803603606081101561023b57600080fd5b50600160a060020a0381358116916020810135909116906040013561058e565b6101796004803603602081101561027157600080fd5b50356105a9565b61029e6004803603602081101561028e57600080fd5b5035600160a060020a03166105d1565b60408051918252519081900360200190f35b6101c1600480360360208110156102c657600080fd5b5035600160a060020a0316610607565b6101c1610625565b6101c1600480360360408110156102f457600080fd5b50600160a060020a0381351690602001351515610630565b6101486004803603602081101561032257600080fd5b5035600160a060020a03166106b4565b6101c16004803603608081101561034857600080fd5b600160a060020a0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561038357600080fd5b82018360208201111561039557600080fd5b803590602001918460018302840111640100000000831117156103b757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506106c7945050505050565b6101486004803603604081101561040e57600080fd5b50600160a060020a03813581169160200135166106ed565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60006104658261071b565b61046e57600080fd5b50600090815260026020526040902054600160a060020a031690565b6000610495826105a9565b905080600160a060020a031683600160a060020a031614156104b657600080fd5b33600160a060020a03821614806104d257506104d281336106ed565b6104db57600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61054e3382610738565b61055757600080fd5b610562838383610797565b505050565b6000610572336106b4565b61057b57600080fd5b6105858383610884565b50600192915050565b610562838383604051806020016040528060008152506106c7565b600081815260016020526040812054600160a060020a0316806105cb57600080fd5b92915050565b6000600160a060020a0382166105e657600080fd5b600160a060020a03821660009081526003602052604090206105cb90610932565b610610336106b4565b61061957600080fd5b61062281610936565b50565b61062e3361097e565b565b600160a060020a03821633141561064657600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b60006105cb60058363ffffffff6109c616565b6106d2848484610544565b6106de848484846109fb565b6106e757600080fd5b50505050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600090815260016020526040902054600160a060020a0316151590565b600080610744836105a9565b905080600160a060020a031684600160a060020a0316148061077f575083600160a060020a03166107748461045a565b600160a060020a0316145b8061078f575061078f81856106ed565b949350505050565b82600160a060020a03166107aa826105a9565b600160a060020a0316146107bd57600080fd5b600160a060020a0382166107d057600080fd5b6107d981610b75565b600160a060020a03831660009081526003602052604090206107fa90610bbd565b600160a060020a038216600090815260036020526040902061081b90610bd4565b600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600160a060020a03821661089757600080fd5b6108a08161071b565b156108aa57600080fd5b6000818152600160209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387169081179091558352600390915290206108f690610bd4565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b5490565b61094760058263ffffffff610bdd16565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b61098f60058263ffffffff610c2916565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a0382166109db57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6000610a0f84600160a060020a0316610c71565b610a1b5750600161078f565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015610aae578181015183820152602001610a96565b50505050905090810190601f168015610adb5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610afd57600080fd5b505af1158015610b11573d6000803e3d6000fd5b505050506040513d6020811015610b2757600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f150b7a020000000000000000000000000000000000000000000000000000000014915050949350505050565b600081815260026020526040902054600160a060020a031615610622576000908152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff19169055565b8054610bd090600163ffffffff610c7716565b9055565b80546001019055565b600160a060020a038116610bf057600080fd5b610bfa82826109c6565b15610c0457600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a038116610c3c57600080fd5b610c4682826109c6565b610c4f57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b3b151590565b600082821115610c8657600080fd5b5090039056fea165627a7a723058202df2a01ae11c7a704f565daa2467d9eeceb8410ba8e3d049dad86c71b025df4e0029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b5060043610610107576000357c01000000000000000000000000000000000000000000000000000000009004806370a08231116100a9578063a22cb46511610083578063a22cb465146102de578063aa271e1a1461030c578063b88d4fde14610332578063e985e9c5146103f857610107565b806370a0823114610278578063983b2d56146102b057806398650275146102d657610107565b806323b872dd116100e557806323b872dd146101c357806340c10f19146101f957806342842e0e146102255780636352211e1461025b57610107565b806301ffc9a71461010c578063081812fc1461015c578063095ea7b314610195575b600080fd5b6101486004803603602081101561012257600080fd5b50357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916610426565b604080519115158252519081900360200190f35b6101796004803603602081101561017257600080fd5b503561045a565b60408051600160a060020a039092168252519081900360200190f35b6101c1600480360360408110156101ab57600080fd5b50600160a060020a03813516906020013561048a565b005b6101c1600480360360608110156101d957600080fd5b50600160a060020a03813581169160208101359091169060400135610544565b6101486004803603604081101561020f57600080fd5b50600160a060020a038135169060200135610567565b6101c16004803603606081101561023b57600080fd5b50600160a060020a0381358116916020810135909116906040013561058e565b6101796004803603602081101561027157600080fd5b50356105a9565b61029e6004803603602081101561028e57600080fd5b5035600160a060020a03166105d1565b60408051918252519081900360200190f35b6101c1600480360360208110156102c657600080fd5b5035600160a060020a0316610607565b6101c1610625565b6101c1600480360360408110156102f457600080fd5b50600160a060020a0381351690602001351515610630565b6101486004803603602081101561032257600080fd5b5035600160a060020a03166106b4565b6101c16004803603608081101561034857600080fd5b600160a060020a0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561038357600080fd5b82018360208201111561039557600080fd5b803590602001918460018302840111640100000000831117156103b757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506106c7945050505050565b6101486004803603604081101561040e57600080fd5b50600160a060020a03813581169160200135166106ed565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60006104658261071b565b61046e57600080fd5b50600090815260026020526040902054600160a060020a031690565b6000610495826105a9565b905080600160a060020a031683600160a060020a031614156104b657600080fd5b33600160a060020a03821614806104d257506104d281336106ed565b6104db57600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61054e3382610738565b61055757600080fd5b610562838383610797565b505050565b6000610572336106b4565b61057b57600080fd5b6105858383610884565b50600192915050565b610562838383604051806020016040528060008152506106c7565b600081815260016020526040812054600160a060020a0316806105cb57600080fd5b92915050565b6000600160a060020a0382166105e657600080fd5b600160a060020a03821660009081526003602052604090206105cb90610932565b610610336106b4565b61061957600080fd5b61062281610936565b50565b61062e3361097e565b565b600160a060020a03821633141561064657600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b60006105cb60058363ffffffff6109c616565b6106d2848484610544565b6106de848484846109fb565b6106e757600080fd5b50505050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600090815260016020526040902054600160a060020a0316151590565b600080610744836105a9565b905080600160a060020a031684600160a060020a0316148061077f575083600160a060020a03166107748461045a565b600160a060020a0316145b8061078f575061078f81856106ed565b949350505050565b82600160a060020a03166107aa826105a9565b600160a060020a0316146107bd57600080fd5b600160a060020a0382166107d057600080fd5b6107d981610b75565b600160a060020a03831660009081526003602052604090206107fa90610bbd565b600160a060020a038216600090815260036020526040902061081b90610bd4565b600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600160a060020a03821661089757600080fd5b6108a08161071b565b156108aa57600080fd5b6000818152600160209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387169081179091558352600390915290206108f690610bd4565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b5490565b61094760058263ffffffff610bdd16565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b61098f60058263ffffffff610c2916565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a0382166109db57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6000610a0f84600160a060020a0316610c71565b610a1b5750600161078f565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015610aae578181015183820152602001610a96565b50505050905090810190601f168015610adb5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610afd57600080fd5b505af1158015610b11573d6000803e3d6000fd5b505050506040513d6020811015610b2757600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f150b7a020000000000000000000000000000000000000000000000000000000014915050949350505050565b600081815260026020526040902054600160a060020a031615610622576000908152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff19169055565b8054610bd090600163ffffffff610c7716565b9055565b80546001019055565b600160a060020a038116610bf057600080fd5b610bfa82826109c6565b15610c0457600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a038116610c3c57600080fd5b610c4682826109c6565b610c4f57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b3b151590565b600082821115610c8657600080fd5b5090039056fea165627a7a723058202df2a01ae11c7a704f565daa2467d9eeceb8410ba8e3d049dad86c71b025df4e0029",
  "sourceMap": "155:421:73:-;;;639:40:62;658:20;639:18;;;;:40;:::i;:::-;1970::68;1989:20;1970:18;;;;:40;:::i;:::-;275:22:56;286:10;275;;;;:22;:::i;:::-;155:421:73;;989:158:62;1064:25;;;;;;1056:34;;;;;;1100:33;;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1100:40:62;1136:4;1100:40;;;989:158::o;685:119:56:-;741:21;:8;754:7;741:12;;;;;;:21;:::i;:::-;777:20;;-1:-1:-1;;;;;777:20:56;;;;;;;;685:119;:::o;259:181:54:-;-1:-1:-1;;;;;335:21:54;;327:30;;;;;;376:18;380:4;386:7;376:3;;;;:18;:::i;:::-;375:19;367:28;;;;;;-1:-1:-1;;;;;406:20:54;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;406:27:54;429:4;406:27;;;259:181::o;786:162::-;858:4;-1:-1:-1;;;;;882:21:54;;874:30;;;;;;-1:-1:-1;;;;;;921:20:54;:11;:20;;;;;;;;;;;;;;;786:162::o;155:421:73:-;;;;;;;",
  "deployedSourceMap": "155:421:73:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;155:421:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;777:133:62;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;777:133:62;-1:-1:-1;;777:133:62;;:::i;:::-;;;;;;;;;;;;;;;;;;3773:151:68;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3773:151:68;;:::i;:::-;;;;-1:-1:-1;;;;;3773:151:68;;;;;;;;;;;;;;3196:292;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3196:292:68;;;;;;;;:::i;:::-;;5329:180;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5329:180:68;;;;;;;;;;;;;;;;;:::i;442:132:73:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;442:132:73;;;;;;;;:::i;6142::68:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;6142:132:68;;;;;;;;;;;;;;;;;:::i;2598:177::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2598:177:68;;:::i;2220:160::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2220:160:68;-1:-1:-1;;;;;2220:160:68;;:::i;:::-;;;;;;;;;;;;;;;;508:90:56;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;508:90:56;-1:-1:-1;;;;;508:90:56;;:::i;604:75::-;;;:::i;4216:213:68:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4216:213:68;;;;;;;;;;:::i;395:107:56:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;395:107:56;-1:-1:-1;;;;;395:107:56;;:::i;6979:211:68:-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;6979:211:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;6979:211:68;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6979:211:68;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6979:211:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;6979:211:68;;-1:-1:-1;6979:211:68;;-1:-1:-1;;;;;6979:211:68:i;4750:145::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4750:145:68;;;;;;;;;;:::i;777:133:62:-;-1:-1:-1;;870:33:62;847:4;870:33;;;;;;;;;;;;;;777:133::o;3773:151:68:-;3832:7;3859:16;3867:7;3859;:16::i;:::-;3851:25;;;;;;-1:-1:-1;3893:24:68;;;;:15;:24;;;;;;-1:-1:-1;;;;;3893:24:68;;3773:151::o;3196:292::-;3259:13;3275:16;3283:7;3275;:16::i;:::-;3259:32;;3315:5;-1:-1:-1;;;;;3309:11:68;:2;-1:-1:-1;;;;;3309:11:68;;;3301:20;;;;;;3339:10;-1:-1:-1;;;;;3339:19:68;;;;:58;;;3362:35;3379:5;3386:10;3362:16;:35::i;:::-;3331:67;;;;;;3409:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;3409:29:68;-1:-1:-1;;;;;3409:29:68;;;;;;;;;3453:28;;3409:24;;3453:28;;;;;;;3196:292;;;:::o;5329:180::-;5419:39;5438:10;5450:7;5419:18;:39::i;:::-;5411:48;;;;;;5470:32;5484:4;5490:2;5494:7;5470:13;:32::i;:::-;5329:180;;;:::o;442:132:73:-;512:4;350:20:56;359:10;350:8;:20::i;:::-;342:29;;;;;;528:18:73;534:2;538:7;528:5;:18::i;:::-;-1:-1:-1;563:4:73;442:132;;;;:::o;6142::68:-;6228:39;6245:4;6251:2;6255:7;6228:39;;;;;;;;;;;;:16;:39::i;2598:177::-;2653:7;2688:20;;;:11;:20;;;;;;-1:-1:-1;;;;;2688:20:68;2726:19;2718:28;;;;;;2763:5;2598:177;-1:-1:-1;;2598:177:68:o;2220:160::-;2275:7;-1:-1:-1;;;;;2302:19:68;;2294:28;;;;;;-1:-1:-1;;;;;2339:24:68;;;;;;:17;:24;;;;;:34;;:32;:34::i;508:90:56:-;350:20;359:10;350:8;:20::i;:::-;342:29;;;;;;572:19;583:7;572:10;:19::i;:::-;508:90;:::o;604:75::-;647:25;661:10;647:13;:25::i;:::-;604:75::o;4216:213:68:-;-1:-1:-1;;;;;4295:16:68;;4301:10;4295:16;;4287:25;;;;;;4341:10;4322:30;;;;:18;:30;;;;;;;;-1:-1:-1;;;;;4322:34:68;;;;;;;;;;;;:45;;-1:-1:-1;;4322:45:68;;;;;;;;;;4382:40;;;;;;;4322:34;;4341:10;4382:40;;;;;;;;;;;4216:213;;:::o;395:107:56:-;451:4;474:21;:8;487:7;474:21;:12;:21;:::i;6979:211:68:-;7085:31;7098:4;7104:2;7108:7;7085:12;:31::i;:::-;7134:48;7157:4;7163:2;7167:7;7176:5;7134:22;:48::i;:::-;7126:57;;;;;;6979:211;;;;:::o;4750:145::-;-1:-1:-1;;;;;4853:25:68;;;4830:4;4853:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4750:145::o;7384:152::-;7441:4;7473:20;;;:11;:20;;;;;;-1:-1:-1;;;;;7473:20:68;7510:19;;;7384:152::o;7896:246::-;7981:4;7997:13;8013:16;8021:7;8013;:16::i;:::-;7997:32;;8058:5;-1:-1:-1;;;;;8047:16:68;:7;-1:-1:-1;;;;;8047:16:68;;:51;;;;8091:7;-1:-1:-1;;;;;8067:31:68;:20;8079:7;8067:11;:20::i;:::-;-1:-1:-1;;;;;8067:31:68;;8047:51;:87;;;;8102:32;8119:5;8126:7;8102:16;:32::i;:::-;8039:96;7896:246;-1:-1:-1;;;;7896:246:68:o;9844:362::-;9957:4;-1:-1:-1;;;;;9937:24:68;:16;9945:7;9937;:16::i;:::-;-1:-1:-1;;;;;9937:24:68;;9929:33;;;;;;-1:-1:-1;;;;;9980:16:68;;9972:25;;;;;;10008:23;10023:7;10008:14;:23::i;:::-;-1:-1:-1;;;;;10042:23:68;;;;;;:17;:23;;;;;:35;;:33;:35::i;:::-;-1:-1:-1;;;;;10087:21:68;;;;;;:17;:21;;;;;:33;;:31;:33::i;:::-;10131:20;;;;:11;:20;;;;;;:25;;-1:-1:-1;;10131:25:68;-1:-1:-1;;;;;10131:25:68;;;;;;;;;10172:27;;10131:20;;10172:27;;;;;;;9844:362;;;:::o;8385:259::-;-1:-1:-1;;;;;8456:16:68;;8448:25;;;;;;8492:16;8500:7;8492;:16::i;:::-;8491:17;8483:26;;;;;;8520:20;;;;:11;:20;;;;;;;;:25;;-1:-1:-1;;8520:25:68;-1:-1:-1;;;;;8520:25:68;;;;;;;;8555:21;;:17;:21;;;;;:33;;:31;:33::i;:::-;8604;;8629:7;;-1:-1:-1;;;;;8604:33:68;;;8621:1;;8604:33;;8621:1;;8604:33;8385:259;;:::o;1062:112:61:-;1153:14;;1062:112::o;685:119:56:-;741:21;:8;754:7;741:21;:12;:21;:::i;:::-;777:20;;-1:-1:-1;;;;;777:20:56;;;;;;;;685:119;:::o;810:127::-;869:24;:8;885:7;869:24;:15;:24;:::i;:::-;908:22;;-1:-1:-1;;;;;908:22:56;;;;;;;;810:127;:::o;786:162:54:-;858:4;-1:-1:-1;;;;;882:21:54;;874:30;;;;;;-1:-1:-1;;;;;;921:20:54;:11;:20;;;;;;;;;;;;;;;786:162::o;10734:347:68:-;10855:4;10880:15;:2;-1:-1:-1;;;;;10880:13:68;;:15::i;:::-;10875:58;;-1:-1:-1;10918:4:68;10911:11;;10875:58;10959:70;;;;;10996:10;10959:70;;;;;;-1:-1:-1;;;;;10959:70:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;10943:13;;10959:36;;;;;;10996:10;;11008:4;;11014:7;;11023:5;;10959:70;;;;;;;;;;;10943:13;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;10959:70:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10959:70:68;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10959:70:68;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10959:70:68;-1:-1:-1;;11047:26:68;11057:16;11047:26;;-1:-1:-1;;10734:347:68;;;;;;:::o;11242:171::-;11341:1;11305:24;;;:15;:24;;;;;;-1:-1:-1;;;;;11305:24:68;:38;11301:106;;11394:1;11359:24;;;:15;:24;;;;;:37;;-1:-1:-1;;11359:37:68;;;11242:171::o;1275:108:61:-;1355:14;;:21;;1374:1;1355:21;:18;:21;:::i;:::-;1338:38;;1275:108::o;1180:89::-;1243:19;;1261:1;1243:19;;;1180:89::o;259:181:54:-;-1:-1:-1;;;;;335:21:54;;327:30;;;;;;376:18;380:4;386:7;376:3;:18::i;:::-;375:19;367:28;;;;;;-1:-1:-1;;;;;406:20:54;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;406:27:54;429:4;406:27;;;259:181::o;514:184::-;-1:-1:-1;;;;;593:21:54;;585:30;;;;;;633:18;637:4;643:7;633:3;:18::i;:::-;625:27;;;;;;-1:-1:-1;;;;;663:20:54;686:5;663:20;;;;;;;;;;;:28;;-1:-1:-1;;663:28:54;;;514:184::o;463:616:80:-;1026:20;1064:8;;;463:616::o;1156:145:66:-;1214:7;1246:1;1241;:6;;1233:15;;;;;;-1:-1:-1;1270:5:66;;;1156:145::o",
  "source": "pragma solidity ^0.5.2;\n\nimport \"./ERC721.sol\";\nimport \"../../access/roles/MinterRole.sol\";\n\n/**\n * @title ERC721Mintable\n * @dev ERC721 minting logic\n */\ncontract ERC721Mintable is ERC721, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param tokenId The token id to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 tokenId) public onlyMinter returns (bool) {\n        _mint(to, tokenId);\n        return true;\n    }\n}\n",
  "sourcePath": "/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/token/ERC721/ERC721Mintable.sol",
  "ast": {
    "absolutePath": "/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/token/ERC721/ERC721Mintable.sol",
    "exportedSymbols": {
      "ERC721Mintable": [
        14379
      ]
    },
    "id": 14380,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 14353,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:73"
      },
      {
        "absolutePath": "/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/token/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 14354,
        "nodeType": "ImportDirective",
        "scope": 14380,
        "sourceUnit": 13842,
        "src": "25:22:73",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/access/roles/MinterRole.sol",
        "file": "../../access/roles/MinterRole.sol",
        "id": 14355,
        "nodeType": "ImportDirective",
        "scope": 14380,
        "sourceUnit": 12312,
        "src": "48:43:73",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 14356,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 13841,
              "src": "182:6:73",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$13841",
                "typeString": "contract ERC721"
              }
            },
            "id": 14357,
            "nodeType": "InheritanceSpecifier",
            "src": "182:6:73"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 14358,
              "name": "MinterRole",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 12311,
              "src": "190:10:73",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MinterRole_$12311",
                "typeString": "contract MinterRole"
              }
            },
            "id": 14359,
            "nodeType": "InheritanceSpecifier",
            "src": "190:10:73"
          }
        ],
        "contractDependencies": [
          12311,
          12829,
          12976,
          13841,
          14545
        ],
        "contractKind": "contract",
        "documentation": "@title ERC721Mintable\n@dev ERC721 minting logic",
        "fullyImplemented": true,
        "id": 14379,
        "linearizedBaseContracts": [
          14379,
          12311,
          13841,
          14545,
          12829,
          12976
        ],
        "name": "ERC721Mintable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 14377,
              "nodeType": "Block",
              "src": "518:56:73",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 14371,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14361,
                        "src": "534:2:73",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 14372,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14363,
                        "src": "538:7:73",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 14370,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13668,
                      "src": "528:5:73",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 14373,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "528:18:73",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 14374,
                  "nodeType": "ExpressionStatement",
                  "src": "528:18:73"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 14375,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "563:4:73",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 14369,
                  "id": 14376,
                  "nodeType": "Return",
                  "src": "556:11:73"
                }
              ]
            },
            "documentation": "@dev Function to mint tokens\n@param to The address that will receive the minted tokens.\n@param tokenId The token id to mint.\n@return A boolean that indicates if the operation was successful.",
            "id": 14378,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 14366,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 14365,
                  "name": "onlyMinter",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 12244,
                  "src": "492:10:73",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "492:10:73"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 14364,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14361,
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 14378,
                  "src": "456:10:73",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14360,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "456:7:73",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14363,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 14378,
                  "src": "468:15:73",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 14362,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "468:7:73",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "455:29:73"
            },
            "returnParameters": {
              "id": 14369,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14368,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 14378,
                  "src": "512:4:73",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 14367,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "512:4:73",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "511:6:73"
            },
            "scope": 14379,
            "src": "442:132:73",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 14380,
        "src": "155:421:73"
      }
    ],
    "src": "0:577:73"
  },
  "legacyAST": {
    "absolutePath": "/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/token/ERC721/ERC721Mintable.sol",
    "exportedSymbols": {
      "ERC721Mintable": [
        14379
      ]
    },
    "id": 14380,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 14353,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:73"
      },
      {
        "absolutePath": "/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/token/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 14354,
        "nodeType": "ImportDirective",
        "scope": 14380,
        "sourceUnit": 13842,
        "src": "25:22:73",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/luiserebii/github/HydroSnowflake-Marketplace-Coupons/contracts/zeppelin/access/roles/MinterRole.sol",
        "file": "../../access/roles/MinterRole.sol",
        "id": 14355,
        "nodeType": "ImportDirective",
        "scope": 14380,
        "sourceUnit": 12312,
        "src": "48:43:73",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 14356,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 13841,
              "src": "182:6:73",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$13841",
                "typeString": "contract ERC721"
              }
            },
            "id": 14357,
            "nodeType": "InheritanceSpecifier",
            "src": "182:6:73"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 14358,
              "name": "MinterRole",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 12311,
              "src": "190:10:73",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MinterRole_$12311",
                "typeString": "contract MinterRole"
              }
            },
            "id": 14359,
            "nodeType": "InheritanceSpecifier",
            "src": "190:10:73"
          }
        ],
        "contractDependencies": [
          12311,
          12829,
          12976,
          13841,
          14545
        ],
        "contractKind": "contract",
        "documentation": "@title ERC721Mintable\n@dev ERC721 minting logic",
        "fullyImplemented": true,
        "id": 14379,
        "linearizedBaseContracts": [
          14379,
          12311,
          13841,
          14545,
          12829,
          12976
        ],
        "name": "ERC721Mintable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 14377,
              "nodeType": "Block",
              "src": "518:56:73",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 14371,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14361,
                        "src": "534:2:73",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 14372,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14363,
                        "src": "538:7:73",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 14370,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13668,
                      "src": "528:5:73",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 14373,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "528:18:73",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 14374,
                  "nodeType": "ExpressionStatement",
                  "src": "528:18:73"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 14375,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "563:4:73",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 14369,
                  "id": 14376,
                  "nodeType": "Return",
                  "src": "556:11:73"
                }
              ]
            },
            "documentation": "@dev Function to mint tokens\n@param to The address that will receive the minted tokens.\n@param tokenId The token id to mint.\n@return A boolean that indicates if the operation was successful.",
            "id": 14378,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 14366,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 14365,
                  "name": "onlyMinter",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 12244,
                  "src": "492:10:73",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "492:10:73"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 14364,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14361,
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 14378,
                  "src": "456:10:73",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14360,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "456:7:73",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14363,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 14378,
                  "src": "468:15:73",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 14362,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "468:7:73",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "455:29:73"
            },
            "returnParameters": {
              "id": 14369,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14368,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 14378,
                  "src": "512:4:73",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 14367,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "512:4:73",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "511:6:73"
            },
            "scope": 14379,
            "src": "442:132:73",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 14380,
        "src": "155:421:73"
      }
    ],
    "src": "0:577:73"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.6+commit.b259423e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.6",
  "updatedAt": "2019-04-12T01:36:38.050Z",
  "devdoc": {
    "details": "ERC721 minting logic",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "mint(address,uint256)": {
        "details": "Function to mint tokens",
        "params": {
          "to": "The address that will receive the minted tokens.",
          "tokenId": "The token id to mint."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    },
    "title": "ERC721Mintable"
  },
  "userdoc": {
    "methods": {}
  }
}